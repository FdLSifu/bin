#!/usr/bin/python3.8
from subprocess import run
import sys

DEBUG = True
flog = None

def init_log():
    global flog
    flog = open("/tmp/bspwmlogs/bspwm_dynamic_desktop.log","a")

def log(msg):
    flog.write(str(msg))
    flog.write('\n')
    if DEBUG:
        print("DEBUG:",msg)

def exec(cmd):
    p = run(cmd.split(' '), capture_output=True)
    #log(p.stdout.decode())
    return p.stdout.decode()


#### MONITORS

def get_monitors():
    out = exec("bspc query -M --names")
    monitors = out.split('\n')[:-1]
    return monitors

def get_focused_mon():
    out = exec("bspc query -M --names -m focused")
    mon = out[:-1]
    return mon

def transfer_desktop(direction):
    log("Calling transfer desktop "+direction)
    if not (direction == "east" or direction == "west"):
        log("Direciton is east or west")
        return
    tgt_mon = exec("bspc query -M --names -m "+direction)[:-1]
    if tgt_mon == '':
        log("target monitor is empty")
        return
    
    tgt_desktop = get_free_desktop(tgt_mon)
    transfer_desktop_nodes(get_focused_desktop(),tgt_desktop)
    exec("bspc desktop "+tgt_desktop+" -f")


def transfer_desktops(src_mon,tgt_mon):
    log("Calling transfer desktops from "+src_mon+" to "+tgt_mon)
    src_desktops = get_desktops(src_mon)

    for src_desktop in src_desktops:
        tgt_desktop = get_free_desktop(tgt_mon)
        transfer_desktop_nodes(src_desktop,tgt_desktop)


#### DESKTOPS
tdname = None

def get_focused_desktop():
    out = exec('bspc query -D --names -d focused')
    return out[:-1]

def get_desktops(m):
    out = exec("bspc query -D --names -m "+m)
    desktops = out.split('\n')[:-1]
    return desktops

def rename_desktops(desktops, m):
    log("Calling rename desktops "+m)
    if "Desktop" in desktops:
        moddesktops = []
        for i in range(len(desktops)):
            log(desktops[i])
            desktop_name = m+"_"+str(i+1)
            exec("bspc desktop "+desktops[i]+ " -n "+desktop_name)
            log("renamed to "+desktop_name)
            moddesktops.append(desktop_name)
        return moddesktops
    else:
        return desktops

def is_empty_desktop(d):
    if len(get_nodes(d)) == 0:
        log(d + " is empty")
    return len(get_nodes(d)) == 0

def create_desktop(name,mon):
    log("Calling create desktop "+name+" "+mon)
    global workspaces
    #check if desktop exists in workspaces
    if name not in workspaces[mon]:
        # create desktop
        exec("bspc monitor "+mon+" -a "+name)
        log("desktop " + name + " created.")

    reorder_desktops(mon)

def delete_desktop(mon,d):
    log("Calling delete desktop "+d+" "+mon)
    exec("bspc desktop "+d+" -r")

    reorder_desktops(mon)

def reorder_desktops(mon):
    log("Calling reorder desktops "+mon)
    global workspaces
    get_workspaces()
    sorted_desktop = sorted(workspaces[mon])
    cmd = "bspc monitor " + mon + " -o"

    for d in sorted_desktop:
        cmd += " " + d
    exec(cmd)

def transfer_desktop_nodes(src_desktop,tgt_desktop):
    log("Calling transfer desktop nodes from "+src_desktop+" to "+tgt_desktop)
    nodes = get_nodes(src_desktop)
    for n in nodes:
        log("node "+n+"")
        exec("bspc node "+n+" -d "+tgt_desktop)


def get_free_desktop(mon):
    log("Calling get free desktop " + mon)
    desktops = get_desktops(mon)

    index = 1
    desktop_bname = desktops[0][:-1]
    while not is_empty_desktop(desktop_bname+str(index)) and desktop_bname+str(index) in desktops:
        index += 1
    new_desktop = desktop_bname+str(index)
    create_desktop(new_desktop,mon)
    return new_desktop


#### NODES
def get_nodes(d):
    out = exec("bspc query -N -d "+d)
    return out.split('\n')[:-1]

def get_focused_node():
    out = exec("bspc query -N -n focused")
    node = out[:-1]
    return node

#### WORKSPACES
workspaces = {}

def get_workspaces():
    log("Calling get_workspaces")
    global workspaces
    monitors = get_monitors()

    for m in monitors:
        workspaces[m] = rename_desktops(get_desktops(m),m)

def clean_workspaces():
    log("Calling clean_workspaces ")
    global workspaces
    for m in workspaces:
        for d in workspaces[m]:
            nodes = get_nodes(d)
            # delete empty desktops or badly name desktops
            if d != tdname and (len(nodes) == 0 or m not in d):
                log("delete desktop "+d)
                delete_desktop(m,d)
        workspaces[m] = get_desktops(m)
            
def setup():
    init_log()
    log("Calling setup")
    global workspaces

    
    get_workspaces()
    log(workspaces)


        
def switchto(target_desktop):
    log("Calling switchto "+target_desktop)
    global workspaces,tdname
    mon = get_focused_mon()
    log("monitor focus "+mon)

    tdname = mon+"_"+target_desktop
    
    create_desktop(tdname,mon)
    exec("bspc desktop "+tdname+" -f")
    return

def moveto(target_desktop):
    log("Calling moveto "+target_desktop)
    global workspaces,tdname
    node = get_focused_node()
    mon = get_focused_mon()
    tdname = mon+"_"+target_desktop
    create_desktop(tdname,mon)

    exec("bspc node "+node+" -d "+tdname)

def usage():
    print("Usage: bspwm_dynamic_desktop {[switch|move] [1-10]} {send desktop1 desktop2}")

def main():
    arguments = sys.argv
    #arguments = ['', 'send_current_desktop', 'east']
    if len(arguments) != 3 and len(arguments) != 1 and len(arguments) != 4:
        usage()
        exit()

    setup()

    if len(arguments) == 3:
        try:
            cmd = arguments[1]
            if cmd == "switch":
                target_desktop = arguments[2]
                i = int(target_desktop)
                if i < 1 or i > 10:
                    raise("index is out of range")
                switchto(target_desktop)
            elif cmd == "move":
                target_desktop = arguments[2]
                i = int(target_desktop)
                if i < 1 or i > 10:
                    raise("index is out of range")

                moveto(target_desktop)
            elif cmd == "send_current_desktop":
                direction = arguments[2]
                transfer_desktop(direction)
            else:
                raise("parsing error")
        except Exception as e:
            log(e)
            usage()
            exit()

    elif len(arguments) == 4:
        try:
            if (arguments[1]=="send"):
                src_mon = arguments[2]
                tgt_mon = arguments[3]
                transfer_desktops(src_mon,tgt_mon)
        except Exception as e:
            log(e)
            usage()
            exit()
    clean_workspaces()

if __name__ == "__main__":
    main()
